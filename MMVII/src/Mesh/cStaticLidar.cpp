#include "MMVII_StaticLidar.h"

namespace MMVII
{

cStaticLidar::cStaticLidar(const std::string & aNameImage,const tPose & aPose,cPerspCamIntrCalib * aCalib) :
    cSensorCamPC(aNameImage, aPose, aCalib),
    mThetaStart       (NAN),
    mThetaStep         (NAN),
    mPhiStart         (NAN),
    mPhiStep           (NAN)
{
}

long cStaticLidar::NbPts() const
{
    return mMaxCol * mMaxLine;
}

void cStaticLidar::ToPly(const std::string & aName,bool WithOffset) const
{
/*    cMMVII_Ofs anOfs(aName,eFileModeOut::CreateText);

    size_t aNbP = NbPts();
    size_t aNbC = mColors.size(); 
    bool  WithVis = (mMulDegVis>0);
    if (WithVis)
    {
        MMVII_INTERNAL_ASSERT_always(aNbC==0,"Colors & DegVis ...");
        aNbC=1;
    }
    // with use 8 byte if initially 8 byte, or if we use the offset that creat big coord
    bool  aMode8 =  mMode8 || WithOffset;

    std::string aSpecCoord = aMode8 ? "float64" : "float32";
    anOfs.Ofs() <<  "ply\n";
    anOfs.Ofs() <<  "format ascii 1.0\n";
    anOfs.Ofs() <<  "comment Generated by MMVVI\n";
    anOfs.Ofs() <<  "element vertex " << aNbP << "\n";
    anOfs.Ofs() <<  "property " <<  aSpecCoord  <<" x\n";
    anOfs.Ofs() <<  "property " <<  aSpecCoord  <<" y\n";
    anOfs.Ofs() <<  "property " <<  aSpecCoord  <<" z\n";
    if (aNbC) 
    {
        anOfs.Ofs() <<  "property uchar red\n"; 
        anOfs.Ofs() <<  "property uchar green\n"; 
        anOfs.Ofs() <<  "property uchar blue\n"; 
    }
    anOfs.Ofs() <<  "end_header\n";


    for (size_t aKPt=0 ; aKPt<aNbP ; aKPt++)
    {
        if (aMode8)
        {
            cPt3dr aPt = WithOffset ? KthPt(aKPt) :  KthPtWoOffs(aKPt);
            anOfs.Ofs() <<  aPt.x() << " " << aPt.y() << " " << aPt.z();
        }
        else
        {
            const cPt3df&  aPt = mPtsF.at(aKPt);
            anOfs.Ofs() <<  aPt.x() << " " << aPt.y() << " " << aPt.z();
        }
        if (aNbC)
        {
           if (aNbC==1)
           {
              size_t aC =  WithVis ? round_ni(GetDegVis(aKPt) *255)  : mColors.at(0).at(aKPt);
              anOfs.Ofs() << " " << aC << " " << aC << " " << aC;
           }
           else if (aNbC==3)
           {
               for (size_t aKC=0 ; aKC<aNbC ; aKC++)
                  anOfs.Ofs() << " " << (size_t)  mColors.at(aKC).at(aKPt);
           }
           else 
           {
               MMVII_INTERNAL_ERROR("Bad number of channel in ply generate : " + ToStr(aNbC));
           }
        }
        anOfs.Ofs() << "\n";
    }*/
}


void cStaticLidar::AddData(const  cAuxAr2007 & anAux)
{
    cSensorCamPC::AddData(anAux);
    MMVII::AddData(cAuxAr2007("StationName",anAux),mStationName);
    MMVII::AddData(cAuxAr2007("ScanName",anAux),mScanName);
    MMVII::AddData(cAuxAr2007("ThetaStart",anAux),mThetaStart);
    MMVII::AddData(cAuxAr2007("ThetaStep",anAux),mThetaStep);
    MMVII::AddData(cAuxAr2007("PhiStart",anAux),mPhiStart);
    MMVII::AddData(cAuxAr2007("Phistep",anAux),mPhiStep);
    MMVII::AddData(cAuxAr2007("MaxCol",anAux),mMaxCol);
    MMVII::AddData(cAuxAr2007("MaxLine",anAux),mMaxLine);
    MMVII::AddData(cAuxAr2007("VertRot",anAux),mVertRot);

    MMVII::AddData(cAuxAr2007("RasterDistance",anAux),mRasterDistance);
    MMVII::AddData(cAuxAr2007("RasterIntensity",anAux),mRasterIntensity);
    MMVII::AddData(cAuxAr2007("RasterMask",anAux),mRasterMask);
    MMVII::AddData(cAuxAr2007("RasterX",anAux),mRasterX);
    MMVII::AddData(cAuxAr2007("RasterY",anAux),mRasterY);
    MMVII::AddData(cAuxAr2007("RasterZ",anAux),mRasterZ);
}

void AddData(const  cAuxAr2007 & anAux,cStaticLidar & aSL)
{
   aSL.AddData(anAux);
}

};

